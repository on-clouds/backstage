apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-app-config
data:
  app-config.yaml: |-
    app:
      baseUrl: {{ .Values.backstage.baseUrl }}:{{ .Values.backstage.port }}
      title: {{ .Values.backstage.title }}
    backend:
      baseUrl:  {{ .Values.backstage.baseUrl }}:{{ .Values.backstage.port }}
    listen:
      port: {{ .Values.backstage.port }}
    csp:
      connect-src: ["'self'", 'http:', 'https:']
    cors:
      origin: {{ .Values.backstage.baseUrl }}:{{ .Values.backstage.port }}
      methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
      credentials: true
    database:
      client: better-sqlite3
      connection: ':memory:'
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    integrations:
      github:
      - host: github.com
        {{ if .Values.backstage.secretName }}
        token: ${BACKSTAGE_GITHUB_TOKEN}
        {{ end }}
    auth:
      environment: production
      providers:
        {{ if and (eq .Values.backstage.authProvider "github") ( .Values.backstage.secretName ) }}
        github:
          production:
            clientId: ${BACKSTAGE_GITHUB_CLIENT_ID}
            clientSecret: ${BACKSTAGE_GITHUB_CLIENT_SECRET}
            signIn:
              resolvers:
              - resolver: usernameMatchingUserEntityName
        {{ end }}
    catalog:
      providers:
        {{ if and (eq .Values.backstage.authProvider "github") ( .Values.backstage.secretName ) }}
        githubOrg:
          id: production
          githubUrl: https://github.com
          token: ${BACKSTAGE_GITHUB_TOKEN}
          orgs: [ '\${BACKSTAGE_GITHUB_ORG:-backstage}\' ]
          schedule:
            initialDelay: { seconds: 30 }
            frequency: { hours: 1 }
            timeout: { minutes: 50 }
        {{- end }}
        github:
          {{- range $i, $org := .Values.backstage.catalog.github }}
          {{ $org.name }}:
            organization: {{ $org.organization }}
            token: ${BACKSTAGE_GITHUB_TOKEN}
            catalogPath: '/catalog-info.yaml' # string
            filters:
              branch: 'main' # string
              repository: '.*' # Regex
            schedule: # same options as in TaskScheduleDefinition
               # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 5 }
               # supports ISO duration, "human duration" as used in code      - type: file
              timeout: { minutes: 2 }
           {{- end }}
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
      - allow: [Component, System, API, Resource, Location, Template]
      locations:
            # Local example data, file locations are relative to the backend process, typically `packages/backend`
            # Local example organizational data
      - type: file
        target: config/org.yaml
        rules:
        - allow: [User, Group]
